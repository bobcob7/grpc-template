package main

import (
	"flag"
	"fmt"
	"log"
	"net"

	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials"
	server "${MODULE}/server/${SERVICE}"
	pb "${MODULE}/rpc/${SERVICE}"
)

// File is autogenerated, do not modify here, see
// generator and template: templates/cmd_main.go.tpl

var (
	tls        = flag.Bool("tls", false, "Connection uses TLS if true, else plain TCP")
	certFile   = flag.String("cert_file", "", "The TLS cert file")
	keyFile    = flag.String("key_file", "", "The TLS key file")
	jsonDBFile = flag.String("json_db_file", "", "A json file containing a list of features")
	port       = flag.Int("port", 10000, "The server port")
)

func main() {
	flag.Parse()
	listenPort := fmt.Sprintf("localhost:%d", *port)
	lis, err := net.Listen("tcp", listenPort)
	if err != nil {
		log.Fatalf("failed to listen: %#v", err)
	}
	var opts []grpc.ServerOption
	if *tls {
		if *certFile == "" {
			log.Fatalf("cert_file argument required to enable tls")
		}
		if *keyFile == "" {
			log.Fatalf("key_file argument required to enable tls")
		}
		creds, err := credentials.NewServerTLSFromFile(*certFile, *keyFile)
		if err != nil {
			log.Fatalf("Failed to generate credentials %v", err)
		}
		opts = []grpc.ServerOption{grpc.Creds(creds)}
	}
	grpcServer := grpc.NewServer(opts...)
	pb.Register${SERVICE_CAMEL}Server(grpcServer, &server.Server{})
	fmt.Println("Listening on", listenPort)
	grpcServer.Serve(lis)
}
